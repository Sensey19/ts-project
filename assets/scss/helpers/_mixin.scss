/* @mixin for border */
@mixin border($color: $white, $width: 1px) {
  border: $width solid $color;
}

/* @function for mixins of responsive developing */
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
/* using responsive developing for specific property */
@mixin fluid-size($name, $min-vw, $max-vw, $min-size, $max-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-size);
  $u4: unit($max-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      #{$name}: $min-size;
      @media screen and (min-width: $min-vw) {
        #{$name}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        #{$name}: $max-size;
      }
    }
  }
}

/* all media settings */
/*
  @mixin response
  @param $prefix {'max' or 'min'}
  @param $media {number}
 */
@mixin response($prefix, $media) {
  @media only screen and ($prefix+-width: $media+px) {
    @content;
  }
}
/*  using '@mixin response' to create own @mixins for max-width of displays */
@mixin mob-galaxyS5() {
  @include response(max, $mob-galaxyS5) {
    @content;
  }
}
@mixin mob-iphone6() {
  @include response(max, $mob-iphone6) {
    @content;
  }
}
@mixin mob() {
  @include response(max, $mob) {
    @content;
  }
}
@mixin mob-tab() {
  @include response(max, $mob-tab) {
    @content;
  }
}
@mixin tab() {
  @include response(max, $tab) {
    @content;
  }
}
@mixin des() {
  @include response(max, $des) {
    @content;
  }
}

@mixin des-max() {
  @include response(max, $des-max) {
    @content;
  }
}

/*  using '@mixin response' to create own @mixins for min-width of displays */
@mixin mob-galaxyS5-min() {
  @include response(min, $mob-galaxyS5 + 1) {
    @content;
  }
}
@mixin mob-iphone6-min() {
  @include response(min, $mob-iphone6 + 1) {
    @content;
  }
}
@mixin mob-min() {
  @include response(min, $mob + 1) {
    @content;
  }
}
@mixin mob-tab-min() {
  @include response(min, $mob-tab + 1) {
    @content;
  }
}
@mixin tab-min() {
  @include response(min, $tab + 1) {
    @content;
  }
}
@mixin des-min() {
  @include response(min, $des + 1) {
    @content;
  }
}

@mixin des-max-min() {
  @include response(min, $des-max + 1) {
    @content;
  }
}

/*
  @mixin response-height
  @param $prefix {'max' or 'min'}
  @param $media {number}
 */
@mixin response-height($prefix, $media) {
  @media ($prefix+-height: $media+px) {
    @content;
  }
}
/*  using '@mixin response-height' to create own @mixins for max-height of displays */
@mixin height-1() {
  @include response-height(max, $height-1) {
    @content;
  }
}
@mixin height-2() {
  @include response-height(max, $height-2) {
    @content;
  }
}

/*  using '@mixin response-height' to create own @mixins for min-height of displays */
@mixin height-min-1() {
  @include response-height(min, $height-1 + 1) {
    @content;
  }
}

@mixin height-min-2() {
  @include response-height(min, $height-2 + 1) {
    @content;
  }
}

/*
  @mixin response-to
  @param $media1 {number}: to set min-width
  @param $media2 {number}: to set max-width
 */
@mixin response-to($media1, $media2) {
  @media only screen and (min-width: $media1+px) and (max-width: $media2+px) {
    @content;
  }
}

/*
  @mixin response-height-to
  @param $media1 {number}: to set min-height
  @param $media2 {number}: to set max-height
 */
@mixin response-height-to($media1, $media2) {
  @media (min-height: $media1+px) and (max-height: $media2+px) {
    @content;
  }
}
